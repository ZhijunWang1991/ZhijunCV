blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::preview_site()
blogdown:::stop_site()
blogdown:::serve_site()
blogdown:::stop_site()
blogdown:::stop_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown::stop_server()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
setwd('C:/Users/wang298/OneDrive - WageningenUR/Rworkspace/github/website_2021')
blogdown:::new_post_addin()
setwd('C:/Users/wang298/OneDrive - WageningenUR/Rworkspace/github/website_2021/content/')
getwd()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::serve_site()
install.packages('revealjs')
q()
q()
blogdown:::serve_site()
blogdown::stop_server()
devtools::install_github("max-alletsee/rstudio-themes")
install.packages('devtools')
devtools::install_github("max-alletsee/rstudio-themes")
install_rstudio_themes(theme = "V-Ink Flavoured")
library(rstudiothemes)
install_rstudio_themes(theme = "V-Ink Flavoured")
rstudioapi::addTheme("https://raw.githubusercontent.com/batpigandme/night-owlish/master/rstheme/night-owlish.rstheme", apply = TRUE)
rstudioapi::addTheme("https://raw.githubusercontent.com/batpigandme/night-owlish/master/rstheme/night-owlish.rstheme", apply = TRUE)
Sys.getlocale()
Sys.getenv()
Sys.getlocalale()
Sys.getlocale()
blogdown:::insert_image_addin()
blogdown:::preview_site()
blogdown::install_hugo()
blogdown:::preview_site()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::preview_site()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::new_post_addin()
reticulate::repl_python()
# define model evaluation method
cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)
# evaluate model
scores = cross_val_score(model, X, y, scoring='accuracy', cv=cv, n_jobs=-1)
# summarize result
print('Mean Accuracy: %.3f (%.3f)' % (mean(scores), std(scores)))
from turtle import shape
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.model_selection import RepeatedStratifiedKFold
from sklearn.model_selection import cross_val_score
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
import matplotlib.pyplot as plt
from numpy import mean, unicode_
from numpy import std
from turtle import shape
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.model_selection import RepeatedStratifiedKFold
from sklearn.model_selection import cross_val_score
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
import matplotlib.pyplot as plt
from numpy import mean, unicode_
from numpy import std
oil_data = pd.read_csv("C:/Users/maxzh/OneDrive/Python_workspace/Data_analysis_using_Python/Dataset/oil_dataset.csv")
oil_data.head()
X = oil_data.values[:,3:]
y = oil_data.values[:,2]
print(X.shape, y.shape)
model = LinearDiscriminantAnalysis()
# define model evaluation method
cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)
# evaluate model
scores = cross_val_score(model, X, y, scoring='accuracy', cv=cv, n_jobs=-1)
# summarize result
print('Mean Accuracy: %.3f (%.3f)' % (mean(scores), std(scores)))
from turtle import shape
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.model_selection import RepeatedStratifiedKFold
from sklearn.model_selection import cross_val_score
from sklearn.datasets import make_classification
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
import matplotlib.pyplot as plt
from numpy import mean, unicode_
from numpy import std
model = LinearDiscriminantAnalysis()
# define model evaluation method
cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)
# evaluate model
scores = cross_val_score(model, X, y, scoring='accuracy', cv=cv, n_jobs=-1)
# summarize result
print('Mean Accuracy: %.3f (%.3f)' % (mean(scores), std(scores)))
model = LinearDiscriminantAnalysis()
cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)
scores = cross_val_score(model, X, y, scoring='accuracy', cv=cv, n_jobs=-1)
from turtle import shape
import pandas as pd
import numpy as np
from sklearn.model_selection import RepeatedStratifiedKFold
from sklearn.model_selection import cross_val_score
from sklearn.datasets import make_classification
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
import matplotlib.pyplot as plt
from numpy import mean, unicode_
from numpy import std
model = LinearDiscriminantAnalysis()
# define model evaluation method
cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)
# evaluate model
scores = cross_val_score(model, X, y, scoring='accuracy', cv=cv, n_jobs=-1)
# summarize result
print('Mean Accuracy: %.3f (%.3f)' % (mean(scores), std(scores)))
lda = LinearDiscriminantAnalysis()
data_plot = lda.fit(X, y).transform(X)
target_names = oil_data['Countries'].astype(str).unique()
# Plot
plt.figure()
colors = ['red', 'green', 'blue', 'orange']
lw = 3
for color, i, target_name in zip(colors, ['Greece', 'Italy', 'Portugal', 'Spain'], target_names):
plt.scatter(
data_plot[y == i, 0], data_plot[y == i, 1], alpha=0.8, color=color, label=target_name
)
plt.legend(loc="best", shadow=False, scatterpoints=1)
plt.title("LDA of oil dataset")
plt.show()
cv
model = LinearDiscriminantAnalysis()
# define model evaluation method
cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)
# evaluate model
scores = cross_val_score(model, X, y, scoring='accuracy', cv=cv)
# summarize result
print('Mean Accuracy: %.3f (%.3f)' % (mean(scores), std(scores)))
blogdown:::preview_site()
quit
blogdown:::new_post_addin()
reticulate::repl_python()
oil_data = pd.read_csv("C:/Users/maxzh/OneDrive/Python_workspace/Data_analysis_using_Python/Dataset/oil_dataset.csv")
wl = pd.read_csv('C:/Users/maxzh/OneDrive/Python_workspace/Data_analysis_using_Python/Dataset/wavelength.csv')
pca_oil_raw = PCA(n_components=3)
principalComponents_oil = pca_oil_raw.fit_transform(oil)
principal_oil_Df = pd.DataFrame(data = principalComponents_oil, columns = ['principal component 1','principal component 2', 'principal component 3'])
principal_oil_Df.tail()
print('Explained variation per principal component: {}'.format(pca_oil_raw.explained_variance_ratio_))
plt.figure()
plt.figure(figsize=(8,6))
plt.xticks(fontsize=12)
plt.yticks(fontsize=14)
plt.xlabel('PC1 30.6%',fontsize=20)
plt.ylabel('PC2 21.1%',fontsize=20)
plt.title("Principal Component Analysis of raw oil",fontsize=26)
targets = ["Greece","Italy","Portugal", "Spain"]
colors = ["#CD0000", "#008B45", "#000000", "#FF1493"]
for target, color in zip(targets,colors):
indicesToKeep = oil_data['Countries'] == target
plt.scatter(principal_oil_Df.loc[indicesToKeep, 'principal component 1']
, principal_oil_Df.loc[indicesToKeep, 'principal component 2'], c = color, s = 50)
plt.legend(targets,prop={'size': 15})
plt.show()
blogdown:::preview_site()
quit
blogdown:::new_post_addin()
blogdown:::preview_site()
blogdown:::preview_site()
install.packages(c("jpeg", "png"))
blogdown:::serve_site()
blogdown::serve_site()
blogdown:::serve_site()
blogdown::serve_site()
blogdown:::preview_site()
install.packages(c("stringr", "terra", "XML"))
#load required library
library(e1071)
#build svm model
svm_model<-
svm(y ~ ., data = trainset, type = "C-classification",
kernel = "linear", scale = FALSE)
library(Hmisc)
library(corrplot)
library(hrbrthemes)
library(ggplot2)
library(reshape2)
library(gplots)
library(heatmaply)
library(prospectr)
##Set workspace
setwd('C:/Users/maxzh/OneDrive/PhD/Banana/MyThesis/Zhijun_Thesis/Thesis_resource/Chapter6_resource')
##load dataset
soil <- read.csv("soil_elements.csv", row.names=1,header=T)
pulp <- read.csv("pulp_elements.csv", row.names=1,header=T)
peel <- read.csv("peel_elements.csv", row.names=1,header=T)
soil <- as.matrix(soil)
pulp <- as.matrix(pulp)
peel <- as.matrix(peel)
##Get correlation Pulp
cor_table_pulp <- cor(pulp,soil,method = "spearman")
yname <- factor(colnames(pulp), levels = colnames(pulp))
corheat <- cbind.data.frame(yname,coef)
##load dataset
soil <- read.csv("soil_elements.csv", row.names=1,header=T)
pulp <- read.csv("pulp_elements.csv", row.names=1,header=T)
peel <- read.csv("peel_elements.csv", row.names=1,header=T)
soil <- as.matrix(soil)
pulp <- as.matrix(pulp)
peel <- as.matrix(peel)
##Get correlation Pulp
cor_table_pulp <- cor(pulp,soil,method = "spearman")
coef<- as.data.frame(cor_table_pulp)
yname <- factor(colnames(pulp), levels = colnames(pulp))
corheat <- cbind.data.frame(yname,coef)
names(corheat)[2:ncol(corheat)] <- colnames(soil)
cormelt<-melt(corheat, id.vars ='yname')
colnames(cormelt)<-c('y','x','R')
xnames <- 'Soil'
ynames <- 'Pulp'
cormelt$R<-round(cormelt$R,2)
pulp_spearman <- ggplot(data = cormelt,aes(x=x,y=y))+
geom_tile(aes(fill=R))+
scale_fill_gradient2(low = "red2",mid = 'white', high = "blue2")+xlab(xnames)+
ylab(ynames)+
ggtitle("(a) Soil - Pulp")+
geom_text(aes(label=R),size = 10)+
theme(axis.ticks = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust= 0, color="black",
size=36, face="bold"),
axis.text.x=element_text(angle = 45,hjust=1),
axis.text=element_text(size=32),
axis.title=element_text(size=34),#change font size of axis text
legend.text=element_text(size=26), #change font size of legend text
legend.title=element_text(size=28))
pulp_spearman
library(corrplot)
library(circlize)
##Load datset
setwd('C:/Users/maxzh/OneDrive/PhD/Banana/MyThesis/Zhijun_Thesis/Chapter6_resource')
##Load datset
setwd('C:/Users/maxzh/OneDrive/PhD/Banana/MyThesis/Zhijun_Thesis/Chapter6_resource')
data <- read.csv("Corr_circle.csv", row.names=1,header=T)
growing <- as.matrix(data[,1:5])
compositions <- as.matrix(data[,6:61])
cor <- cor(growing,compositions,method = "spearman")
mat <- cor
circos.clear()
grid.col <- c(Altitude ="#8B4513", Monthly_Mean_Temperature ="#EE30A7",	Annual_Rainfall= "#104E8B",Organic = "yellow", Conventional = "green")
col_fun = colorRamp2(c(-1, 0, 1), c("blue", "white", "red"),transparency = 0.2)
circos.par(canvas.xlim= c(-1.5,1.5),canvas.ylim = c(-1,2))
chordDiagram(mat,big.gap = 30,
grid.col = grid.col,
annotationTrack = c("grid", "axis"),
annotationTrackHeight = mm_h(8),
col = col_fun,
link.sort = TRUE, link.decreasing = TRUE
)
circos.track(track.index = 1, panel.fun = function(x, y) {
xlim = get.cell.meta.data("xlim")
xplot = get.cell.meta.data("xplot")
ylim = get.cell.meta.data("ylim")
sector.name = get.cell.meta.data("sector.index")
if(abs(xplot[2] - xplot[1]) < 0) {
circos.text(mean(xlim), ylim[1], sector.name, facing = "inside",
niceFacing = TRUE, adj = c(0, 0.5), col = "black")
} else {
circos.text(mean(xlim), ylim[1], sector.name, facing = "outside",
niceFacing = TRUE, adj = c(0.5, 0), col= "black")
}
}, bg.border = NA)
circos.clear()
##TEST
grid.col <- c(Altitude ="#8B4513",
Monthly_Mean_Temperature ="#EE30A7",
Annual_Rainfall= "#104E8B",
Organic = "green",
Conventional = "yellow")
col_fun = colorRamp2(c(-1, 0, 1), c("blue", "white", "red"),transparency = 0)
chordDiagram(mat, grid.col = grid.col, col = col_fun,
annotationTrack = "grid")
# we go back to the first track and customize sector labels
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.text(CELL_META$xcenter, CELL_META$ylim[1], CELL_META$sector.index,
facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5),cex = 1)
}, bg.border = NA) # here set bg.border to NA is important
library(ComplexHeatmap)
lgd = Legend(col_fun = col_fun, title = "R", legend_height = unit(8, "cm"),grid_width = unit(2, "cm"))
draw(lgd, x = unit(1, "npc") - unit(1, "mm"), y = unit(4, "mm"),
just = c("right","bottom"))
install.packages('ComplexHeatmap')
library(devtools)
install_github("jokergoo/ComplexHeatmap")
library(ComplexHeatmap)
lgd = Legend(col_fun = col_fun, title = "R", legend_height = unit(8, "cm"),grid_width = unit(2, "cm"))
draw(lgd, x = unit(1, "npc") - unit(1, "mm"), y = unit(4, "mm"),
just = c("right","bottom"))
blogdown:::serve_site()
blogdown:::serve_site()
install.packages('blogdown')
install.packages('complexHeatmap')
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("ComplexHeatmap")
blogdown:::preview_site()
blogdown:::preview_site()
