blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::preview_site()
blogdown:::stop_site()
blogdown:::serve_site()
blogdown:::stop_site()
blogdown:::stop_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown::stop_server()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
setwd('C:/Users/wang298/OneDrive - WageningenUR/Rworkspace/github/website_2021')
blogdown:::new_post_addin()
setwd('C:/Users/wang298/OneDrive - WageningenUR/Rworkspace/github/website_2021/content/')
getwd()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::serve_site()
install.packages('revealjs')
q()
q()
blogdown:::serve_site()
blogdown::stop_server()
devtools::install_github("max-alletsee/rstudio-themes")
install.packages('devtools')
devtools::install_github("max-alletsee/rstudio-themes")
install_rstudio_themes(theme = "V-Ink Flavoured")
library(rstudiothemes)
install_rstudio_themes(theme = "V-Ink Flavoured")
rstudioapi::addTheme("https://raw.githubusercontent.com/batpigandme/night-owlish/master/rstheme/night-owlish.rstheme", apply = TRUE)
rstudioapi::addTheme("https://raw.githubusercontent.com/batpigandme/night-owlish/master/rstheme/night-owlish.rstheme", apply = TRUE)
Sys.getlocale()
Sys.getenv()
Sys.getlocalale()
Sys.getlocale()
blogdown:::insert_image_addin()
blogdown:::preview_site()
blogdown::install_hugo()
blogdown:::preview_site()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::preview_site()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::new_post_addin()
reticulate::repl_python()
# define model evaluation method
cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)
# evaluate model
scores = cross_val_score(model, X, y, scoring='accuracy', cv=cv, n_jobs=-1)
# summarize result
print('Mean Accuracy: %.3f (%.3f)' % (mean(scores), std(scores)))
from turtle import shape
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.model_selection import RepeatedStratifiedKFold
from sklearn.model_selection import cross_val_score
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
import matplotlib.pyplot as plt
from numpy import mean, unicode_
from numpy import std
from turtle import shape
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.model_selection import RepeatedStratifiedKFold
from sklearn.model_selection import cross_val_score
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
import matplotlib.pyplot as plt
from numpy import mean, unicode_
from numpy import std
oil_data = pd.read_csv("C:/Users/maxzh/OneDrive/Python_workspace/Data_analysis_using_Python/Dataset/oil_dataset.csv")
oil_data.head()
X = oil_data.values[:,3:]
y = oil_data.values[:,2]
print(X.shape, y.shape)
model = LinearDiscriminantAnalysis()
# define model evaluation method
cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)
# evaluate model
scores = cross_val_score(model, X, y, scoring='accuracy', cv=cv, n_jobs=-1)
# summarize result
print('Mean Accuracy: %.3f (%.3f)' % (mean(scores), std(scores)))
from turtle import shape
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.model_selection import RepeatedStratifiedKFold
from sklearn.model_selection import cross_val_score
from sklearn.datasets import make_classification
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
import matplotlib.pyplot as plt
from numpy import mean, unicode_
from numpy import std
model = LinearDiscriminantAnalysis()
# define model evaluation method
cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)
# evaluate model
scores = cross_val_score(model, X, y, scoring='accuracy', cv=cv, n_jobs=-1)
# summarize result
print('Mean Accuracy: %.3f (%.3f)' % (mean(scores), std(scores)))
model = LinearDiscriminantAnalysis()
cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)
scores = cross_val_score(model, X, y, scoring='accuracy', cv=cv, n_jobs=-1)
from turtle import shape
import pandas as pd
import numpy as np
from sklearn.model_selection import RepeatedStratifiedKFold
from sklearn.model_selection import cross_val_score
from sklearn.datasets import make_classification
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
import matplotlib.pyplot as plt
from numpy import mean, unicode_
from numpy import std
model = LinearDiscriminantAnalysis()
# define model evaluation method
cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)
# evaluate model
scores = cross_val_score(model, X, y, scoring='accuracy', cv=cv, n_jobs=-1)
# summarize result
print('Mean Accuracy: %.3f (%.3f)' % (mean(scores), std(scores)))
lda = LinearDiscriminantAnalysis()
data_plot = lda.fit(X, y).transform(X)
target_names = oil_data['Countries'].astype(str).unique()
# Plot
plt.figure()
colors = ['red', 'green', 'blue', 'orange']
lw = 3
for color, i, target_name in zip(colors, ['Greece', 'Italy', 'Portugal', 'Spain'], target_names):
plt.scatter(
data_plot[y == i, 0], data_plot[y == i, 1], alpha=0.8, color=color, label=target_name
)
plt.legend(loc="best", shadow=False, scatterpoints=1)
plt.title("LDA of oil dataset")
plt.show()
cv
model = LinearDiscriminantAnalysis()
# define model evaluation method
cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)
# evaluate model
scores = cross_val_score(model, X, y, scoring='accuracy', cv=cv)
# summarize result
print('Mean Accuracy: %.3f (%.3f)' % (mean(scores), std(scores)))
blogdown:::preview_site()
quit
blogdown:::new_post_addin()
reticulate::repl_python()
oil_data = pd.read_csv("C:/Users/maxzh/OneDrive/Python_workspace/Data_analysis_using_Python/Dataset/oil_dataset.csv")
wl = pd.read_csv('C:/Users/maxzh/OneDrive/Python_workspace/Data_analysis_using_Python/Dataset/wavelength.csv')
pca_oil_raw = PCA(n_components=3)
principalComponents_oil = pca_oil_raw.fit_transform(oil)
principal_oil_Df = pd.DataFrame(data = principalComponents_oil, columns = ['principal component 1','principal component 2', 'principal component 3'])
principal_oil_Df.tail()
print('Explained variation per principal component: {}'.format(pca_oil_raw.explained_variance_ratio_))
plt.figure()
plt.figure(figsize=(8,6))
plt.xticks(fontsize=12)
plt.yticks(fontsize=14)
plt.xlabel('PC1 30.6%',fontsize=20)
plt.ylabel('PC2 21.1%',fontsize=20)
plt.title("Principal Component Analysis of raw oil",fontsize=26)
targets = ["Greece","Italy","Portugal", "Spain"]
colors = ["#CD0000", "#008B45", "#000000", "#FF1493"]
for target, color in zip(targets,colors):
indicesToKeep = oil_data['Countries'] == target
plt.scatter(principal_oil_Df.loc[indicesToKeep, 'principal component 1']
, principal_oil_Df.loc[indicesToKeep, 'principal component 2'], c = color, s = 50)
plt.legend(targets,prop={'size': 15})
plt.show()
blogdown:::preview_site()
quit
blogdown:::new_post_addin()
blogdown:::preview_site()
blogdown:::preview_site()
